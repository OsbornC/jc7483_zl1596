,NetId,name,URL,endDate,dataSize,table,image,audio,video,data type,text/csv,text/json,text/tab-separated-values,image/bmp,image/jpeg,image/png,image/tiff,audio/x-wav,audio/x-aiff,video/mp4,data format,"columns [index;name;type;...] for type use categorical, numerical, string, integer, dateTime etc",augmented dataset URL,taskType,taskSubType,outputType,targetIndex,targetName,rawData (non csv) ,rawDataIndex,problemDescription,preprocessing,preprocessing function call,featureExtractor,featureExtractor function call,featureSelector,featureSelector function call,sklearn,xgboost,keras,tensorflow,lightgbm,Libraries,estimators,estimator1,estimator1 function call,estimator2,estimator2 function call,estimator3,estimator3 function call,postprocessing,postprocessing function call,performanceMetric,crossValidationPerformance,codeURIRunningTimeSecondsTesting,codeURIRunningTimeSecondsTraining,WellWrittenCodeDocRating0-5,WellWrittenCodeRating0-5,codeURI,codeYear,codeMonth,codeAuthor,codeCountry,GenericUnivariateSelect,SelectPercentile,SelectKBest,SelectFpr,SelectFdr,SelectFromModel,SelectFwe,RFE,RFECV,VarianceThreshold,chi2,f_classif,f_regression,mutual_info_classif,mutual_info_regression,KNeighborsClassifier,KNeighborsRegressor,SGDClassifier,LinearRegression,LogisticRegression,Ridge,BayesianRidge,Lasso,SGDRegressor,DecisionTreeClassifier,DecisionTreeRegressor,LinearSVC,SVC,LinearSVR,RandomForestClassifier,GradientBoostingClassifier,RandomForestRegressor,GradientBoostingRegressor,MLPClassifier,XGBClassifier,XGBRegressor,CNN,ResNet,apply,apply_column,cnn_train,cnn_callback,apply_target
197,"jc7483, zl1596",kinguistics/heartbeat-sounds,https://www.kaggle.com/kinguistics/heartbeat-sounds,11/27/16 1:33,152MB,TRUE,FALSE,TRUE,FALSE,"table, audio",FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE,wav,[0; dataset;string;1; fname;string;2; label;string;3; sublabel;string],,classification,multiclass,ClassLabel,2,label,TRUE,0,"Classify if the heartbeat sound is an artifact, normal or murmur.","nan processing, make all time series have equal length, one hot encoding","[""train[1]['label'].fillna('unclassified')""]",convert data to arrays,,,,TRUE,FALSE,TRUE,TRUE,FALSE,"sklearn, keras",cnn,crossvalidation,"[""Sequential()""]",nn,,ridgemodel,,,,accuracy,0.9318,,,,,https://www.kaggle.com/toregil/what-s-in-a-heartbeat,2017,May,,,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,"[""clean_filename, string='Aunlabelledtest'"", ""load_wav_file, path=INPUT_LIB + 'set_a/'"", ""len"", ""repeat_to_length, length=max(train[1]['len_series'])""]","[""'fname'"", ""'fname'"", ""'time_series'"", ""'time_series'""]","[""add(Conv1D(filters=4, kernel_size=9, activation='relu', input_shape = X_train.shape[1:], kernel_regularizer = l2(0.025)))"", ""add(MaxPool1D(strides=4))"", ""add(BatchNormalization())"", ""add(Conv1D(filters=4, kernel_size=9, activation='relu', kernel_regularizer = l2(0.05)))"", ""add(MaxPool1D(strides=4))"", ""add(BatchNormalization())"", ""add(Conv1D(filters=8, kernel_size=9, activation='relu', kernel_regularizer = l2(0.1)))"", ""add(MaxPool1D(strides=4))"", ""add(BatchNormalization())"", ""add(Conv1D(filters=16, kernel_size=9, activation='relu'))"", ""add(MaxPool1D(strides=4))"", ""add(BatchNormalization())"", ""add(Dropout(0.25))"", ""add(Conv1D(filters=64, kernel_size=4, activation='relu'))"", ""add(BatchNormalization())"", ""add(Dropout(0.5))"", ""add(Conv1D(filters=32, kernel_size=1, activation='relu'))"", ""add(BatchNormalization())"", ""add(Dropout(0.75))"", ""add(GlobalAvgPool1D())"", ""add(Dense(3, activation='softmax'))"", ""compile(optimizer=Adam(1e-4), loss='categorical_crossentropy', metrics=['accuracy'])"", ""fit_generator(batch_generator(X_train, Y_train, 8), epochs=30, steps_per_epoch=1000, validation_data=(X_test, Y_test), callbacks=[callback[0], callback[1]], verbose=2)"", ""load_weights('set_a_weights.h5')""] ","[""callback[0] = ModelCheckpoint('set_a_weights.h5', monitor='val_loss', save_best_only=True, save_weights_only=True)"", ""callback[1] = LearningRateScheduler(lambda x: 1e-3 * 0.8**x)""]","[""'fname'"", ""'time_series'"", ""'len_series'"", ""'time_series'""]"