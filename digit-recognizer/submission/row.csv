Id,NetId,name,URL,endDate,dataSize,table,image,audio,video,data type,text/csv,text/json,text/tab-separated-values,image/bmp,image/jpeg,image/png,image/tiff,audio/x-wav,audio/x-aiff,video/mp4,data format,"columns [index;name;type;...] for type use categorical, numerical, string, integer, dateTime etc",augmented dataset URL,taskType,taskSubType,outputType,targetIndex,targetName,rawData (non csv) ,rawDataIndex,problemDescription,preprocessing,preprocessing function call,featureExtractor,featureExtractor function call,featureSelector,featureSelector function call,sklearn,xgboost,keras,tensorflow,lightgbm,Libraries,estimators,estimator1,estimator1 function call,estimator2,estimator2 function call,estimator3,estimator3 function call,postprocessing,postprocessing function call,performanceMetric,crossValidationPerformance,codeURIRunningTimeSecondsTesting,codeURIRunningTimeSecondsTraining,WellWrittenCodeDocRating0-5,WellWrittenCodeRating0-5,codeURI,codeYear,codeMonth,codeAuthor,codeCountry,GenericUnivariateSelect,SelectPercentile,SelectKBest,SelectFpr,SelectFdr,SelectFromModel,SelectFwe,RFE,RFECV,VarianceThreshold,chi2,f_classif,f_regression,mutual_info_classif,mutual_info_regression,KNeighborsClassifier,KNeighborsRegressor,SGDClassifier,LinearRegression,LogisticRegression,Ridge,BayesianRidge,Lasso,SGDRegressor,DecisionTreeClassifier,DecisionTreeRegressor,LinearSVC,SVC,LinearSVR,RandomForestClassifier,GradientBoostingClassifier,RandomForestRegressor,GradientBoostingRegressor,MLPClassifier,XGBClassifier,XGBRegressor,CNN,ResNet,auxiliaryDataURL,unwanted column,numeric column,estimator1 parameter,augmentation,augmentation function calls,test set,neural network initialization,auxiliary function calls
452,"wl1845, jx1119",digit-recognizer,https://www.kaggle.com/c/digit-recognizer,2001/7/20 23:59,122.21MB,TRUE,FALSE,FALSE,FALSE,table,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,csv,[0; id;integer;1; pixel0;integer;2; pixel1;integer;4; pixel783;integer],,classification,multiclass,classLabel,1,label,FALSE,,To identify the image of the hand written symbols,"nan processing, image pre-processing, one hot encoding, data augmentation","[""train = train / 255.0"", ""train = train.values.reshape(-1,28,28,1)"", ""train_Y =to_categorical(train_Y, num_classes = 10)""]",None,,pca,PCA(n_components=0.8),TRUE,FALSE,TRUE,FALSE,FALSE,keras,cnn,knn,"[""model = Sequential()""]",,,,"MaxPool2D(pool_size=(2,2), activation ='relu'",,,accuracy,0.997,,,,,https://www.kaggle.com/yassineghouzam/introduction-to-cnn-keras-0-997-top-6/notebook,2017,Oct,Yassine Ghousam,France,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,,,,,,"[""datagen = ImageDataGenerator(featurewise_center=False, samplewise_center=False, featurewise_std_normalization=False,  samplewise_std_normalization=False,  zca_whitening=False,  rotation_range=10, zoom_range = 0.1, width_shift_range=0.1, height_shift_range=0.1,  horizontal_flip=False, vertical_flip=False)""]",,"[""model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))"", ""model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))"", ""model.add(MaxPool2D(pool_size=(2,2)))"", ""model.add(Dropout(0.25))"", ""model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))"",""model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))"",""model.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))"", ""model.add(Dropout(0.25))"", ""model.add(Flatten())"", ""model.add(Dense(256, activation = 'relu'))"", ""model.add(Dropout(0.5))"", ""model.add(Dense(10, activation = 'softmax'))"", ""optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)"", ""model.compile(optimizer = optimizer , loss = 'categorical_crossentropy', metrics=['accuracy'])"", ""learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', patience=3,  verbose=1, factor=0.5, min_lr=0.00001)"", ""epochs = 1"", ""batch_size = 86"", ""history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),epochs = epochs, validation_data = (X_val,Y_val),verbose = 2, steps_per_epoch=X_train.shape[0] // batch_size, callbacks=[learning_rate_reduction])"", ""Y_pred = model.predict(X_val)""]",